Görev: BigAdd dili için lexical analyzer yazmak

Input: Prompt for the source file name. Get the source file name from the user. Assuming the user gave the name x, you should open and read the source file with the extension “.ba” like x.ba.
# Kullanıcıdan kaynak dosya alınacak. kullanıcı x girerse x.ba dosyası açılacak

*Bence biz kullanıcının hem "x" girmesine hem de "x.ba" girmesine izin verelim.
yani kullanıcı x girersede x.ba, x.ba girersede x.ba kaynak dosyasını okuyalım.
kullanıcıdan aldığımız stringde . harfi var mı kontrol edelim, varsa sonu .ba mı diye kontrol edelim.
Dosya isminde bir tane nokta '.' olacağını varsayıp (yani kullanıcı "my.super.file.ba" girmesin)
for döndüsüyle string üzerinde . gelinceye kadar dolaşıp bir sonraki karakter 'b' ondan sonraki karakter 'a'
ise ve başka karakter yok ise dosyayı açarız. 
*** EKSTRA: dosyanın tam yolunu da kabul edelim mi? mesela "C:/Users/x.ba". bakarız :D



Output: Your program should produce three outputs:

1)The number of the following lexeme types to the total number of lexemes found: identifiers, paranthesis, keywords, end of line character
## Kelime tiplerine ait kaç kelime olduğunu yazdıracağız. Kelime tipleri: identifier, paranthesis, keyword ve end of line.

* kelime tiplerini içeren kategoriler oluşturabiliriz (quizdeki gibi). mesela paranthesis için
iki boyurlu arrayımız ['(', ')', '[', ']', '{', '}'] şeklinde, keyword arrayı ["int", "loop", "times" ...]
end of line için de ['\n', '\r', '\r\n'] (<- incelenmeli) ve okuduğumuz kelime bunlardan birisiyse ilgili tipin sayısını bir arttırız. 




2)A text file containing the lexemes found during analysis. Each lexeme should be given with its type.
# Ayrıştırdığımız kelimeleri (lexeme) tipiyle birlikte bir text dosyasına kaydedeceğiz.

* kelimeleri ve tiplerini tutmak için struct oluşturabiliriz. Oluşturduğumuz struct tipinde bir array tutabiliriz (veya struct pointer?). En son hata yoksa bu arrayı dosyaya yazarız (her satıra bir kelime
 ve tipi gelecek şekilde olabilir). 




3)Any errors found during analysis. (pdf in son kısmından alıntı: The error messages should point at the exact error type and error location. )
#Program hata bulursa çıktı verecek. (hatalar nasıl olabilir?)

*Hata anladığım kadaryıla sadece bilinmeyen karakter geldiğinde oluyor. yani anlam olarak kontrol 
etmiyoruz. (PL notlarından Lexical Analyzer'a tekrar bakalım). Mesela ğüşçı... harflerini veya 
gülen yüz (😀 😁) sembollerini okudğumuzda hata verceğiz. hatanın hangi satırda olduğuna bulsak
fena olmaz. kaçıncı satırda olduğunu kaç tane '.' karakteri okudğumuzdan bulabiliriz. 
('.' karakteri bu dilin satır sonu işareti) 
